// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package postgresql

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    name, mail, password
) VALUES (
          $1, $2, $3
          )
RETURNING id, name, mail, password
`

type CreateUserParams struct {
	Name     string
	Mail     string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Mail, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mail,
		&i.Password,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const findUser = `-- name: FindUser :one
SELECT id, name, mail, password FROM users
WHERE name = $1 OR mail = $2 LIMIT 1
`

type FindUserParams struct {
	Name string
	Mail string
}

func (q *Queries) FindUser(ctx context.Context, arg FindUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, findUser, arg.Name, arg.Mail)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mail,
		&i.Password,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, name, mail, password FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Mail,
		&i.Password,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET password = $2 WHERE id = $1
`

type UpdateUserParams struct {
	ID       int64
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Password)
	return err
}
